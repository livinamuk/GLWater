#version 430 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (binding = 0) uniform sampler2D mainImageTexture;
layout (binding = 1) uniform sampler2D positionTexture;
layout(rgba8, binding = 2) uniform image2D underWaterImage;

uniform float time;  
uniform float waterHeight;
uniform vec3 viewPos;

const float waveStrength = 0.001;
const float waveFrequency = 4.0;
const float waveSpeed = 1.0;


// Gaussian parameters
const int blurRadius = 20;  // Kernel radius (controls blur intensity)
const float sigma = 5.0;   // Standard deviation for Gaussian

// Gaussian weights
float gaussian(float x, float sigma) {
    return exp(-(x * x) / (2.0 * sigma * sigma));
}

// Horizontal blur pass
vec3 applyHorizontalBlur(ivec2 pixelCoords, vec2 uv, int radius, float sigma) {
    vec3 color = vec3(0.0);
    float weightSum = 0.0;

    for (int i = -radius; i <= radius; ++i) {
        vec2 offset = vec2(i, 0) / imageSize(underWaterImage);
        float weight = gaussian(float(i), sigma);
        color += texture(mainImageTexture, uv + offset).rgb * weight;
        weightSum += weight;
    }
    return color / weightSum;
}

// Vertical blur pass
vec3 applyVerticalBlur(ivec2 pixelCoords, vec2 uv, int radius, float sigma) {
    vec3 color = vec3(0.0);
    float weightSum = 0.0;

    for (int i = -radius; i <= radius; ++i) {
        vec2 offset = vec2(0, i) / imageSize(underWaterImage);
        float weight = gaussian(float(i), sigma);
        color += texture(mainImageTexture, uv + offset).rgb * weight;
        weightSum += weight;
    }
    return color / weightSum;
}

float calculateFog(float distance, float start, float end, float transition) {
    if (distance <= start) {
        return 0.0; // No fog near the camera
    }

    if (distance >= end) {
        return 1.0; // Full fog at or beyond the far distance
    }

    // Calculate the transition influence
    float fogFactor = (distance - start) / (end - start);
    if (fogFactor < transition) {
        // Apply a smoother curve during the transition phase
        return pow(fogFactor / transition, 2.0); // Squared curve for smooth ramp-up
    } else {
        // Linear blend after the transition
        return mix(0.0, 1.0, (fogFactor - transition) / (1.0 - transition));
    }
}

void main() {

    vec2 viewportSize = imageSize(underWaterImage);

	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = pixelCoords/viewportSize;    
    uv += vec2(sin((time + waveFrequency * uv.y) * waveSpeed + uv.y)* waveStrength, 0);
    
    // Apply horizontal and vertical Gaussian blur
    vec3 blurredColor = applyHorizontalBlur(pixelCoords, uv, blurRadius, sigma);
    blurredColor = applyVerticalBlur(pixelCoords, uv, blurRadius, sigma);

    vec3 mainColor = texture(mainImageTexture, uv).rgb;
    vec3 watercolorColor = vec3(0.4, 0.8, 0.6);

    vec3 finalColor = blurredColor * watercolorColor;

    
    vec3 worldPos = texture(positionTexture, uv).rgb;
  


    imageStore(underWaterImage, pixelCoords, vec4(finalColor, 1));


}
